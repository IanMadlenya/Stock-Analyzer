/*
 * ICS 4UI Final Project - Stock Analyzer
 * By: Sourav Biswas
 */

package stock.analyzer;

//imports
import java.awt.Color;
import java.awt.Graphics;
import java.util.GregorianCalendar;

public class Stock_Analyzer extends javax.swing.JFrame {

    //fields
    String stockSymbol;
    boolean[] holdhis;
    boolean trends = false;
    boolean algotrading = false;
    Stock stock;
    boolean scheck = false;
    int duration = 5;
    int endYr = 2017;
    int startYr = endYr - 1;
    
    /**
     * Creates new form Stock_Analyzer
     */
    public Stock_Analyzer() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("Enter Stock Symbol");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton1.setText("Trend Analysis");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Stock Analyzer");

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 860, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 584, Short.MAX_VALUE)
        );

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton2.setText("Algorithmic Trading");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRadioButton1.setText("1 Year Analysis");
        jRadioButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton1ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRadioButton2.setText("3 Year Analysis");
        jRadioButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton2ActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jRadioButton3.setText("5 Year Analysis");
        jRadioButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 194, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jRadioButton3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 170, Short.MAX_VALUE)
                        .addComponent(jRadioButton2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jRadioButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(220, 220, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(313, 313, 313))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jRadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(jRadioButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //buttons
    
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        
        stockSymbol = evt.getActionCommand();
        
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        
        setStockInfo();
        trends = true;
        algotrading = false;
        repaint();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        setStockInfo();
        algotrading = true;
        trends = false;
        repaint();
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
        
        startYr = endYr - 1;
        setStockInfo();
        repaint();
        
    }//GEN-LAST:event_jRadioButton1ActionPerformed

    private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
        
        startYr = endYr - 3;
        setStockInfo();
        repaint();
        
    }//GEN-LAST:event_jRadioButton2ActionPerformed

    private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton3ActionPerformed
        
        startYr = endYr - 5;
        setStockInfo();
        repaint();
        
    }//GEN-LAST:event_jRadioButton3ActionPerformed

    //setting stock information
    public void setStockInfo() {
        
        GregorianCalendar start = new GregorianCalendar(startYr,0,1);
        GregorianCalendar end = new GregorianCalendar(endYr,0,1);
        stock = new Stock(stockSymbol,start,end);
        scheck = true;
        if (stock.stocklen == 0) {
            scheck = false;
        }
        
    }
    
    //rounding function
    public static double roundTo(double n, int decimalPlace) {
        
        int factor = (int) Math.pow(10, decimalPlace);
        double y = n * factor;
        double z = Math.round(y);
        return z / factor;
        
    }
    
    //sleep - used for animations
    public static void sleep(int duration) {
        
        try {
            Thread.sleep(duration);
        } 
        catch (Exception e) {}
        
    }
    
    //trading algorithm
    public static boolean algo(Double[] a, int currDay) { //false means sell and true means buy or hold
        
        boolean ret = false;
        double s = 0; //5 day moving avg
        double s2 = 0; //20 day moving avg
        
        for (int i = currDay - 20; i < currDay; i++) {
            s2 += a[i];
            if (i >= currDay - 5) {
                s += a[i];
            }
        }
        
        s = s / 5;
        s2 = s2 / 20;

        //if 5-day moving avg is higher than 20-day avg, buy
        if (s > s2) {
            ret = true;
        }
        return ret;
    }
    
    //paint
    public void paint(Graphics g) {
        
        if (trends || algotrading) {
            
            double width = 1070 - 214; 
            double height = 645 - 92 - 30 - 3 - 17; //minus offset and label width separately plus an aesthetic offset and an offset at the bottom
            g.setColor(Color.BLACK);
            g.fillRect(214, 92, (int) width, 553);

            if (scheck) {
                
                double xIncr = width / (double)stock.stocklen;
                
                double yIncr = height / (stock.findMax() - stock.findMin() + 5);
 
                //TREND OR ALGO ANALYSIS
                
                if (trends) {
                    g.setColor(Color.RED);
                    for (int i = stock.stocklen - 1; i > 0; i--) {

                        //must be read backwards
                        g.drawLine((int)(214 + (stock.stocklen - i) * xIncr), (int)(122 + height - (stock.closes.get(i - 1) - stock.findMin()) * yIncr), 
                        (int)(214 + (stock.stocklen - i - 1) * xIncr), (int)(122 + height - (stock.closes.get(i) - stock.findMin()) * yIncr));
                        sleep(duration);
                    } 
                                    
                    int counter = stock.stocklen;
        
                    //for line of best fit
                    double sy = 0;
                    for (int i = 0; i < counter; i++) {
                        sy += stock.closes.get(i);
                    }

                    //constructing line of best fit
                    double meanX = (counter + 1) / 2;
                    double meanY = sy / counter;
                    double numer = 0;
                    double denom = 0;

                    //calculating r
                    double sX = 0;
                    double sY = 0;
                    double sXY = 0;
                    double sX2 = 0;
                    double sY2 = 0;


                    for (int i = 0; i < counter; i++) {
                        numer += (i + 1 - meanX) * (stock.closes.get(stock.stocklen - 1 - i) - meanY);
                        denom += Math.pow(i + 1 - meanX, 2);

                        sX += i + 1;
                        sY += stock.closes.get(i);
                        sXY += (i + 1) * stock.closes.get(stock.stocklen - 1 - i);
                        sX2 += Math.pow(i + 1, 2);
                        sY2 += Math.pow(stock.closes.get(stock.stocklen - 1 - i), 2);

                    }

                    double m = numer / denom;
                    double b = meanY - m * meanX;
                    
                    //flipping around the line of best fit
                    g.setColor(Color.YELLOW);

                    for (int i = 1; i <= stock.stocklen; i++) {
                        if (122 + height - ((i - 1) * m + b - stock.findMin()) * yIncr < 645) {
                            g.drawLine((int) (214 + (i - 1) * xIncr), (int) (122 + height - ((i - 1) * m + b - stock.findMin()) * yIncr), (int)(214 + i * xIncr), (int) (122 + height - (i * m + b - stock.findMin()) * yIncr));
                            sleep(duration);
                        }
                    }
                    double r = (counter * sXY - sX * sY) / Math.pow((counter * sX2 - Math.pow(sX,2)) * (counter * sY2 - Math.pow(sY,2)), 0.5);

                    g.setColor(Color.WHITE);
                    g.drawString("Trend Strength: " + Double.toString(roundTo(r,4)), 230, 110);
                    g.setColor(Color.RED);
                    g.drawString("Stock Price",865,110);
                    g.setColor(Color.YELLOW);
                    g.drawString("Trendline",980,110);
                    
                    //drawing labels and axes

                    //horizontal lines
                    g.setColor(Color.WHITE);
                    g.drawLine(214,(int)(122 + height), 1070,(int)(122 + height));
                    g.drawLine(214,(int)(122 + height - (stock.findMax() - stock.findMin()) * yIncr / 2), 1070,(int)(122 + height - (stock.findMax() - stock.findMin()) * yIncr / 2));
                    g.drawLine(214,(int)(122 + height - (stock.findMax() - stock.findMin()) * yIncr), 1070,(int)(122 + height - (stock.findMax() - stock.findMin()) * yIncr));
                    
                    g.drawString(Double.toString(stock.findMin()),220,(int)(117 + height));
                    g.drawString(Double.toString(roundTo((stock.findMax() + stock.findMin()) / 2.0, 2)),220,(int)(135 + height - (stock.findMax() - stock.findMin()) * yIncr / 2));
                    g.drawString(Double.toString(stock.findMax()),220,(int)(135 + height - (stock.findMax() - stock.findMin()) * yIncr));
                    
                    //vertical lines
                    for (int i = 0; i <= endYr - startYr; i++) {
                        g.drawLine((int) (214 + width * i / (endYr - startYr)),(int)(122 + height), (int) (214 + width * i / (endYr - startYr)),(int)(122 + height - (stock.findMax() - stock.findMin()) * yIncr));
                        
                        if (i == 0) {
                            g.drawString(Integer.toString(startYr + i),220,(int)(136 + height));
                        } else if (i == endYr - startYr) {
                            g.drawString(Integer.toString(startYr + i),(int) (180 + width * i / (endYr - startYr)),(int)(136 + height));
                        } else {
                            g.drawString(Integer.toString(startYr + i),(int) (200 + width * i / (endYr - startYr)),(int)(136 + height));
                        }
                    }
                    
                } else {
                    
                    holdhis = new boolean[stock.stocklen];
                    holdhis[0] = false;
                    double[] fiveDayAvg = new double[stock.stocklen - 5];
                    double[] twentyDayAvg = new double[stock.stocklen - 20];
                    double cash = 100;
                    double[] cashRecords = new double[stock.stocklen];
                    cashRecords[0] = cash;
                    
                    for (int i = stock.stocklen - 1; i > 0; i--) {
                        
                        if (i > stock.stocklen - 21) {
                            holdhis[stock.stocklen - i] = false;
                            
                        } else {
                            Double[] a = new Double[stock.stocklen - i];
                            for (int j = stock.stocklen - 1; j >= i; j--) {
                                a[stock.stocklen - 1 - j] = stock.closes.get(j);
                            }

                            holdhis[stock.stocklen - i] = algo(a, stock.stocklen - i);
                        }
                        
                        if (i <= stock.stocklen - 21) {
                            //SMA's
                            double s2 = 0;
                            double s = 0;
                            for (int j = i; j < i + 20; j++) {
                                s2 += stock.closes.get(j);
                                if (j < i + 5) {
                                    s += stock.closes.get(j);
                                }
                            }
                            //saves memory
                            s2 = s2 / 20;
                            s = s / 5;
                            fiveDayAvg[stock.stocklen - 21 - i] = s;
                            twentyDayAvg[stock.stocklen - 21 - i] = s2;
                                                            
                            if (i <= stock.stocklen - 22) {
                                
                                g.setColor(Color.BLUE);
                                g.drawLine((int)(214 + (stock.stocklen - i) * xIncr), (int)(122 + height - (fiveDayAvg[stock.stocklen - 21 - i] - stock.findMin()) * yIncr), 
                        (int)(214 + (stock.stocklen - i - 1) * xIncr), (int)(122 + height - (fiveDayAvg[stock.stocklen - 22 - i] - stock.findMin()) * yIncr));
                                                            
                                g.setColor(Color.MAGENTA);
                                g.drawLine((int)(214 + (stock.stocklen - i) * xIncr), (int)(122 + height - (twentyDayAvg[stock.stocklen - 21 - i] - stock.findMin()) * yIncr), 
                        (int)(214 + (stock.stocklen - i - 1) * xIncr), (int)(122 + height - (twentyDayAvg[stock.stocklen - 22 - i] - stock.findMin()) * yIncr));
                            } 
                        }
                        
                        if (holdhis[stock.stocklen - 1 - i]) {
                            g.setColor(Color.GREEN);
                            cash = cash * stock.closes.get(i) / stock.closes.get(i + 1);
                        } else {
                            g.setColor(Color.RED);
                        }          
                        
                        //must be read backwards
                        g.drawLine((int)(214 + (stock.stocklen - i) * xIncr), (int)(122 + height - (stock.closes.get(i - 1) - stock.findMin()) * yIncr), 
                        (int)(214 + (stock.stocklen - i - 1) * xIncr), (int)(122 + height - (stock.closes.get(i) - stock.findMin()) * yIncr));
                        
                        //cash can go offscreen for now
                        cashRecords[stock.stocklen - i] = cash;
                        
                        g.setColor(Color.YELLOW);
                        g.drawLine((int)(214 + (stock.stocklen - i) * xIncr), (int)(122 + height - cashRecords[stock.stocklen - i] / 2), 
                        (int)(214 + (stock.stocklen - i - 1) * xIncr), (int)(122 + height - cashRecords[stock.stocklen - i - 1] / 2));
                        
                        if (cash > 100) {
                            g.setColor(Color.GREEN);
                        } else {
                            g.setColor(Color.RED);
                        }
                        
                        g.fillRect(214, 92, 130, 30);
                        g.setColor(Color.BLACK);
                        g.drawString(Double.toString(roundTo(cash - 100,2)) + " % Return", 230, 110);

                        g.setColor(Color.RED);
                        g.drawString("Stock Price",540,110);
                        g.setColor(Color.GREEN);
                        g.drawString("Stock Price While Holding",610,110);
                        g.setColor(Color.BLUE);
                        g.drawString("5 Day Moving Avg",760,110);
                        g.setColor(Color.MAGENTA);
                        g.drawString("20 Day Moving Avg",865,110);
                        g.setColor(Color.YELLOW);
                        g.drawString("Return Rate",980,110);
                        sleep(duration);
                    }
                    
                    //drawing labels and axes

                    //horizontal lines
                    
                    g.setColor(Color.WHITE);
                    g.drawLine(214,(int)(122 + height), 1070,(int)(122 + height));
                    g.drawLine(214,(int)(122 + height - (stock.findMax() - stock.findMin()) * yIncr / 2), 1070,(int)(122 + height - (stock.findMax() - stock.findMin()) * yIncr / 2));
                    g.drawLine(214,(int)(122 + height - (stock.findMax() - stock.findMin()) * yIncr), 1070,(int)(122 + height - (stock.findMax() - stock.findMin()) * yIncr));
                    
                    g.drawString(Double.toString(stock.findMin()),220,(int)(117 + height));
                    g.drawString(Double.toString(roundTo((stock.findMax() + stock.findMin()) / 2.0, 2)),220,(int)(135 + height - (stock.findMax() - stock.findMin()) * yIncr / 2));
                    g.drawString(Double.toString(stock.findMax()),220,(int)(135 + height - (stock.findMax() - stock.findMin()) * yIncr));
                    
                    //vertical lines
                    for (int i = 0; i <= endYr - startYr; i++) {
                        g.drawLine((int) (214 + width * i / (endYr - startYr)),(int)(122 + height), (int) (214 + width * i / (endYr - startYr)),(int)(122 + height - (stock.findMax() - stock.findMin()) * yIncr));
                        
                        if (i == 0) {
                            g.drawString(Integer.toString(startYr + i),220,(int)(136 + height));
                        } else if (i == endYr - startYr) {
                            g.drawString(Integer.toString(startYr + i),(int) (180 + width * i / (endYr - startYr)),(int)(136 + height));
                        } else {
                            g.drawString(Integer.toString(startYr + i),(int) (200 + width * i / (endYr - startYr)),(int)(136 + height));
                        }
                    }
                
                }              
            } else {
                g.setColor(Color.WHITE);
                g.drawString("You Must Enter a Valid Stock Symbol", 575, 110);
            }
        }
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Stock_Analyzer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Stock_Analyzer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Stock_Analyzer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Stock_Analyzer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Stock_Analyzer().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
